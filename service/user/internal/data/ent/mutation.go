// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"user/internal/data/ent/predicate"
	"user/internal/data/ent/users"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUsers = "Users"
)

// UsersMutation represents an operation that mutates the Users nodes in the graph.
type UsersMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	mobile           *string
	password         *string
	nick_name        *string
	birthday         *time.Time
	gender           *string
	role             *int32
	addrole          *int32
	add_time         *time.Time
	update_time      *time.Time
	deleted_at       *time.Time
	is_deleted_at    *int8
	addis_deleted_at *int8
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Users, error)
	predicates       []predicate.Users
}

var _ ent.Mutation = (*UsersMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*UsersMutation)

// newUsersMutation creates new mutation for the Users entity.
func newUsersMutation(c config, op Op, opts ...usersOption) *UsersMutation {
	m := &UsersMutation{
		config:        c,
		op:            op,
		typ:           TypeUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersID sets the ID field of the mutation.
func withUsersID(id int64) usersOption {
	return func(m *UsersMutation) {
		var (
			err   error
			once  sync.Once
			value *Users
		)
		m.oldValue = func(ctx context.Context) (*Users, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Users.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsers sets the old Users of the mutation.
func withUsers(node *Users) usersOption {
	return func(m *UsersMutation) {
		m.oldValue = func(context.Context) (*Users, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Users entities.
func (m *UsersMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Users.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMobile sets the "mobile" field.
func (m *UsersMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *UsersMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *UsersMutation) ResetMobile() {
	m.mobile = nil
}

// SetPassword sets the "password" field.
func (m *UsersMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UsersMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UsersMutation) ResetPassword() {
	m.password = nil
}

// SetNickName sets the "nick_name" field.
func (m *UsersMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *UsersMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ClearNickName clears the value of the "nick_name" field.
func (m *UsersMutation) ClearNickName() {
	m.nick_name = nil
	m.clearedFields[users.FieldNickName] = struct{}{}
}

// NickNameCleared returns if the "nick_name" field was cleared in this mutation.
func (m *UsersMutation) NickNameCleared() bool {
	_, ok := m.clearedFields[users.FieldNickName]
	return ok
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *UsersMutation) ResetNickName() {
	m.nick_name = nil
	delete(m.clearedFields, users.FieldNickName)
}

// SetBirthday sets the "birthday" field.
func (m *UsersMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *UsersMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ClearBirthday clears the value of the "birthday" field.
func (m *UsersMutation) ClearBirthday() {
	m.birthday = nil
	m.clearedFields[users.FieldBirthday] = struct{}{}
}

// BirthdayCleared returns if the "birthday" field was cleared in this mutation.
func (m *UsersMutation) BirthdayCleared() bool {
	_, ok := m.clearedFields[users.FieldBirthday]
	return ok
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *UsersMutation) ResetBirthday() {
	m.birthday = nil
	delete(m.clearedFields, users.FieldBirthday)
}

// SetGender sets the "gender" field.
func (m *UsersMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UsersMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *UsersMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[users.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *UsersMutation) GenderCleared() bool {
	_, ok := m.clearedFields[users.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *UsersMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, users.FieldGender)
}

// SetRole sets the "role" field.
func (m *UsersMutation) SetRole(i int32) {
	m.role = &i
	m.addrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *UsersMutation) Role() (r int32, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldRole(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// AddRole adds i to the "role" field.
func (m *UsersMutation) AddRole(i int32) {
	if m.addrole != nil {
		*m.addrole += i
	} else {
		m.addrole = &i
	}
}

// AddedRole returns the value that was added to the "role" field in this mutation.
func (m *UsersMutation) AddedRole() (r int32, exists bool) {
	v := m.addrole
	if v == nil {
		return
	}
	return *v, true
}

// ClearRole clears the value of the "role" field.
func (m *UsersMutation) ClearRole() {
	m.role = nil
	m.addrole = nil
	m.clearedFields[users.FieldRole] = struct{}{}
}

// RoleCleared returns if the "role" field was cleared in this mutation.
func (m *UsersMutation) RoleCleared() bool {
	_, ok := m.clearedFields[users.FieldRole]
	return ok
}

// ResetRole resets all changes to the "role" field.
func (m *UsersMutation) ResetRole() {
	m.role = nil
	m.addrole = nil
	delete(m.clearedFields, users.FieldRole)
}

// SetAddTime sets the "add_time" field.
func (m *UsersMutation) SetAddTime(t time.Time) {
	m.add_time = &t
}

// AddTime returns the value of the "add_time" field in the mutation.
func (m *UsersMutation) AddTime() (r time.Time, exists bool) {
	v := m.add_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddTime returns the old "add_time" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldAddTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddTime: %w", err)
	}
	return oldValue.AddTime, nil
}

// ClearAddTime clears the value of the "add_time" field.
func (m *UsersMutation) ClearAddTime() {
	m.add_time = nil
	m.clearedFields[users.FieldAddTime] = struct{}{}
}

// AddTimeCleared returns if the "add_time" field was cleared in this mutation.
func (m *UsersMutation) AddTimeCleared() bool {
	_, ok := m.clearedFields[users.FieldAddTime]
	return ok
}

// ResetAddTime resets all changes to the "add_time" field.
func (m *UsersMutation) ResetAddTime() {
	m.add_time = nil
	delete(m.clearedFields, users.FieldAddTime)
}

// SetUpdateTime sets the "update_time" field.
func (m *UsersMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UsersMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ClearUpdateTime clears the value of the "update_time" field.
func (m *UsersMutation) ClearUpdateTime() {
	m.update_time = nil
	m.clearedFields[users.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "update_time" field was cleared in this mutation.
func (m *UsersMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[users.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UsersMutation) ResetUpdateTime() {
	m.update_time = nil
	delete(m.clearedFields, users.FieldUpdateTime)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UsersMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UsersMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UsersMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[users.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UsersMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[users.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UsersMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, users.FieldDeletedAt)
}

// SetIsDeletedAt sets the "is_deleted_at" field.
func (m *UsersMutation) SetIsDeletedAt(i int8) {
	m.is_deleted_at = &i
	m.addis_deleted_at = nil
}

// IsDeletedAt returns the value of the "is_deleted_at" field in the mutation.
func (m *UsersMutation) IsDeletedAt() (r int8, exists bool) {
	v := m.is_deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeletedAt returns the old "is_deleted_at" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldIsDeletedAt(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeletedAt: %w", err)
	}
	return oldValue.IsDeletedAt, nil
}

// AddIsDeletedAt adds i to the "is_deleted_at" field.
func (m *UsersMutation) AddIsDeletedAt(i int8) {
	if m.addis_deleted_at != nil {
		*m.addis_deleted_at += i
	} else {
		m.addis_deleted_at = &i
	}
}

// AddedIsDeletedAt returns the value that was added to the "is_deleted_at" field in this mutation.
func (m *UsersMutation) AddedIsDeletedAt() (r int8, exists bool) {
	v := m.addis_deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsDeletedAt clears the value of the "is_deleted_at" field.
func (m *UsersMutation) ClearIsDeletedAt() {
	m.is_deleted_at = nil
	m.addis_deleted_at = nil
	m.clearedFields[users.FieldIsDeletedAt] = struct{}{}
}

// IsDeletedAtCleared returns if the "is_deleted_at" field was cleared in this mutation.
func (m *UsersMutation) IsDeletedAtCleared() bool {
	_, ok := m.clearedFields[users.FieldIsDeletedAt]
	return ok
}

// ResetIsDeletedAt resets all changes to the "is_deleted_at" field.
func (m *UsersMutation) ResetIsDeletedAt() {
	m.is_deleted_at = nil
	m.addis_deleted_at = nil
	delete(m.clearedFields, users.FieldIsDeletedAt)
}

// Where appends a list predicates to the UsersMutation builder.
func (m *UsersMutation) Where(ps ...predicate.Users) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UsersMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Users).
func (m *UsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.mobile != nil {
		fields = append(fields, users.FieldMobile)
	}
	if m.password != nil {
		fields = append(fields, users.FieldPassword)
	}
	if m.nick_name != nil {
		fields = append(fields, users.FieldNickName)
	}
	if m.birthday != nil {
		fields = append(fields, users.FieldBirthday)
	}
	if m.gender != nil {
		fields = append(fields, users.FieldGender)
	}
	if m.role != nil {
		fields = append(fields, users.FieldRole)
	}
	if m.add_time != nil {
		fields = append(fields, users.FieldAddTime)
	}
	if m.update_time != nil {
		fields = append(fields, users.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, users.FieldDeletedAt)
	}
	if m.is_deleted_at != nil {
		fields = append(fields, users.FieldIsDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldMobile:
		return m.Mobile()
	case users.FieldPassword:
		return m.Password()
	case users.FieldNickName:
		return m.NickName()
	case users.FieldBirthday:
		return m.Birthday()
	case users.FieldGender:
		return m.Gender()
	case users.FieldRole:
		return m.Role()
	case users.FieldAddTime:
		return m.AddTime()
	case users.FieldUpdateTime:
		return m.UpdateTime()
	case users.FieldDeletedAt:
		return m.DeletedAt()
	case users.FieldIsDeletedAt:
		return m.IsDeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldMobile:
		return m.OldMobile(ctx)
	case users.FieldPassword:
		return m.OldPassword(ctx)
	case users.FieldNickName:
		return m.OldNickName(ctx)
	case users.FieldBirthday:
		return m.OldBirthday(ctx)
	case users.FieldGender:
		return m.OldGender(ctx)
	case users.FieldRole:
		return m.OldRole(ctx)
	case users.FieldAddTime:
		return m.OldAddTime(ctx)
	case users.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case users.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case users.FieldIsDeletedAt:
		return m.OldIsDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Users field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case users.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case users.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	case users.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case users.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case users.FieldRole:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case users.FieldAddTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddTime(v)
		return nil
	case users.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case users.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case users.FieldIsDeletedAt:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersMutation) AddedFields() []string {
	var fields []string
	if m.addrole != nil {
		fields = append(fields, users.FieldRole)
	}
	if m.addis_deleted_at != nil {
		fields = append(fields, users.FieldIsDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case users.FieldRole:
		return m.AddedRole()
	case users.FieldIsDeletedAt:
		return m.AddedIsDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	case users.FieldRole:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRole(v)
		return nil
	case users.FieldIsDeletedAt:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Users numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(users.FieldNickName) {
		fields = append(fields, users.FieldNickName)
	}
	if m.FieldCleared(users.FieldBirthday) {
		fields = append(fields, users.FieldBirthday)
	}
	if m.FieldCleared(users.FieldGender) {
		fields = append(fields, users.FieldGender)
	}
	if m.FieldCleared(users.FieldRole) {
		fields = append(fields, users.FieldRole)
	}
	if m.FieldCleared(users.FieldAddTime) {
		fields = append(fields, users.FieldAddTime)
	}
	if m.FieldCleared(users.FieldUpdateTime) {
		fields = append(fields, users.FieldUpdateTime)
	}
	if m.FieldCleared(users.FieldDeletedAt) {
		fields = append(fields, users.FieldDeletedAt)
	}
	if m.FieldCleared(users.FieldIsDeletedAt) {
		fields = append(fields, users.FieldIsDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersMutation) ClearField(name string) error {
	switch name {
	case users.FieldNickName:
		m.ClearNickName()
		return nil
	case users.FieldBirthday:
		m.ClearBirthday()
		return nil
	case users.FieldGender:
		m.ClearGender()
		return nil
	case users.FieldRole:
		m.ClearRole()
		return nil
	case users.FieldAddTime:
		m.ClearAddTime()
		return nil
	case users.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case users.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case users.FieldIsDeletedAt:
		m.ClearIsDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Users nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersMutation) ResetField(name string) error {
	switch name {
	case users.FieldMobile:
		m.ResetMobile()
		return nil
	case users.FieldPassword:
		m.ResetPassword()
		return nil
	case users.FieldNickName:
		m.ResetNickName()
		return nil
	case users.FieldBirthday:
		m.ResetBirthday()
		return nil
	case users.FieldGender:
		m.ResetGender()
		return nil
	case users.FieldRole:
		m.ResetRole()
		return nil
	case users.FieldAddTime:
		m.ResetAddTime()
		return nil
	case users.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case users.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case users.FieldIsDeletedAt:
		m.ResetIsDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Users unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Users edge %s", name)
}
