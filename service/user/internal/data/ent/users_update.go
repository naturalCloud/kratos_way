// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"user/internal/data/ent/predicate"
	"user/internal/data/ent/users"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsersUpdate is the builder for updating Users entities.
type UsersUpdate struct {
	config
	hooks    []Hook
	mutation *UsersMutation
}

// Where appends a list predicates to the UsersUpdate builder.
func (uu *UsersUpdate) Where(ps ...predicate.Users) *UsersUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetMobile sets the "mobile" field.
func (uu *UsersUpdate) SetMobile(s string) *UsersUpdate {
	uu.mutation.SetMobile(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UsersUpdate) SetPassword(s string) *UsersUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNickName sets the "nick_name" field.
func (uu *UsersUpdate) SetNickName(s string) *UsersUpdate {
	uu.mutation.SetNickName(s)
	return uu
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableNickName(s *string) *UsersUpdate {
	if s != nil {
		uu.SetNickName(*s)
	}
	return uu
}

// ClearNickName clears the value of the "nick_name" field.
func (uu *UsersUpdate) ClearNickName() *UsersUpdate {
	uu.mutation.ClearNickName()
	return uu
}

// SetBirthday sets the "birthday" field.
func (uu *UsersUpdate) SetBirthday(t time.Time) *UsersUpdate {
	uu.mutation.SetBirthday(t)
	return uu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableBirthday(t *time.Time) *UsersUpdate {
	if t != nil {
		uu.SetBirthday(*t)
	}
	return uu
}

// ClearBirthday clears the value of the "birthday" field.
func (uu *UsersUpdate) ClearBirthday() *UsersUpdate {
	uu.mutation.ClearBirthday()
	return uu
}

// SetGender sets the "gender" field.
func (uu *UsersUpdate) SetGender(s string) *UsersUpdate {
	uu.mutation.SetGender(s)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableGender(s *string) *UsersUpdate {
	if s != nil {
		uu.SetGender(*s)
	}
	return uu
}

// ClearGender clears the value of the "gender" field.
func (uu *UsersUpdate) ClearGender() *UsersUpdate {
	uu.mutation.ClearGender()
	return uu
}

// SetRole sets the "role" field.
func (uu *UsersUpdate) SetRole(i int32) *UsersUpdate {
	uu.mutation.ResetRole()
	uu.mutation.SetRole(i)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableRole(i *int32) *UsersUpdate {
	if i != nil {
		uu.SetRole(*i)
	}
	return uu
}

// AddRole adds i to the "role" field.
func (uu *UsersUpdate) AddRole(i int32) *UsersUpdate {
	uu.mutation.AddRole(i)
	return uu
}

// ClearRole clears the value of the "role" field.
func (uu *UsersUpdate) ClearRole() *UsersUpdate {
	uu.mutation.ClearRole()
	return uu
}

// SetAddTime sets the "add_time" field.
func (uu *UsersUpdate) SetAddTime(t time.Time) *UsersUpdate {
	uu.mutation.SetAddTime(t)
	return uu
}

// SetNillableAddTime sets the "add_time" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableAddTime(t *time.Time) *UsersUpdate {
	if t != nil {
		uu.SetAddTime(*t)
	}
	return uu
}

// ClearAddTime clears the value of the "add_time" field.
func (uu *UsersUpdate) ClearAddTime() *UsersUpdate {
	uu.mutation.ClearAddTime()
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UsersUpdate) SetUpdateTime(t time.Time) *UsersUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableUpdateTime(t *time.Time) *UsersUpdate {
	if t != nil {
		uu.SetUpdateTime(*t)
	}
	return uu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (uu *UsersUpdate) ClearUpdateTime() *UsersUpdate {
	uu.mutation.ClearUpdateTime()
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UsersUpdate) SetDeletedAt(t time.Time) *UsersUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableDeletedAt(t *time.Time) *UsersUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UsersUpdate) ClearDeletedAt() *UsersUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetIsDeletedAt sets the "is_deleted_at" field.
func (uu *UsersUpdate) SetIsDeletedAt(i int8) *UsersUpdate {
	uu.mutation.ResetIsDeletedAt()
	uu.mutation.SetIsDeletedAt(i)
	return uu
}

// SetNillableIsDeletedAt sets the "is_deleted_at" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableIsDeletedAt(i *int8) *UsersUpdate {
	if i != nil {
		uu.SetIsDeletedAt(*i)
	}
	return uu
}

// AddIsDeletedAt adds i to the "is_deleted_at" field.
func (uu *UsersUpdate) AddIsDeletedAt(i int8) *UsersUpdate {
	uu.mutation.AddIsDeletedAt(i)
	return uu
}

// ClearIsDeletedAt clears the value of the "is_deleted_at" field.
func (uu *UsersUpdate) ClearIsDeletedAt() *UsersUpdate {
	uu.mutation.ClearIsDeletedAt()
	return uu
}

// Mutation returns the UsersMutation object of the builder.
func (uu *UsersUpdate) Mutation() *UsersMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsersUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsersUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsersUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsersUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   users.Table,
			Columns: users.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: users.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldMobile,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldPassword,
		})
	}
	if value, ok := uu.mutation.NickName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldNickName,
		})
	}
	if uu.mutation.NickNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldNickName,
		})
	}
	if value, ok := uu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldBirthday,
		})
	}
	if uu.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldBirthday,
		})
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldGender,
		})
	}
	if uu.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldGender,
		})
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: users.FieldRole,
		})
	}
	if value, ok := uu.mutation.AddedRole(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: users.FieldRole,
		})
	}
	if uu.mutation.RoleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: users.FieldRole,
		})
	}
	if value, ok := uu.mutation.AddTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldAddTime,
		})
	}
	if uu.mutation.AddTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldAddTime,
		})
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldUpdateTime,
		})
	}
	if uu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldUpdateTime,
		})
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldDeletedAt,
		})
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldDeletedAt,
		})
	}
	if value, ok := uu.mutation.IsDeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: users.FieldIsDeletedAt,
		})
	}
	if value, ok := uu.mutation.AddedIsDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: users.FieldIsDeletedAt,
		})
	}
	if uu.mutation.IsDeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: users.FieldIsDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UsersUpdateOne is the builder for updating a single Users entity.
type UsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersMutation
}

// SetMobile sets the "mobile" field.
func (uuo *UsersUpdateOne) SetMobile(s string) *UsersUpdateOne {
	uuo.mutation.SetMobile(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UsersUpdateOne) SetPassword(s string) *UsersUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNickName sets the "nick_name" field.
func (uuo *UsersUpdateOne) SetNickName(s string) *UsersUpdateOne {
	uuo.mutation.SetNickName(s)
	return uuo
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableNickName(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetNickName(*s)
	}
	return uuo
}

// ClearNickName clears the value of the "nick_name" field.
func (uuo *UsersUpdateOne) ClearNickName() *UsersUpdateOne {
	uuo.mutation.ClearNickName()
	return uuo
}

// SetBirthday sets the "birthday" field.
func (uuo *UsersUpdateOne) SetBirthday(t time.Time) *UsersUpdateOne {
	uuo.mutation.SetBirthday(t)
	return uuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableBirthday(t *time.Time) *UsersUpdateOne {
	if t != nil {
		uuo.SetBirthday(*t)
	}
	return uuo
}

// ClearBirthday clears the value of the "birthday" field.
func (uuo *UsersUpdateOne) ClearBirthday() *UsersUpdateOne {
	uuo.mutation.ClearBirthday()
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UsersUpdateOne) SetGender(s string) *UsersUpdateOne {
	uuo.mutation.SetGender(s)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableGender(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetGender(*s)
	}
	return uuo
}

// ClearGender clears the value of the "gender" field.
func (uuo *UsersUpdateOne) ClearGender() *UsersUpdateOne {
	uuo.mutation.ClearGender()
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UsersUpdateOne) SetRole(i int32) *UsersUpdateOne {
	uuo.mutation.ResetRole()
	uuo.mutation.SetRole(i)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableRole(i *int32) *UsersUpdateOne {
	if i != nil {
		uuo.SetRole(*i)
	}
	return uuo
}

// AddRole adds i to the "role" field.
func (uuo *UsersUpdateOne) AddRole(i int32) *UsersUpdateOne {
	uuo.mutation.AddRole(i)
	return uuo
}

// ClearRole clears the value of the "role" field.
func (uuo *UsersUpdateOne) ClearRole() *UsersUpdateOne {
	uuo.mutation.ClearRole()
	return uuo
}

// SetAddTime sets the "add_time" field.
func (uuo *UsersUpdateOne) SetAddTime(t time.Time) *UsersUpdateOne {
	uuo.mutation.SetAddTime(t)
	return uuo
}

// SetNillableAddTime sets the "add_time" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableAddTime(t *time.Time) *UsersUpdateOne {
	if t != nil {
		uuo.SetAddTime(*t)
	}
	return uuo
}

// ClearAddTime clears the value of the "add_time" field.
func (uuo *UsersUpdateOne) ClearAddTime() *UsersUpdateOne {
	uuo.mutation.ClearAddTime()
	return uuo
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UsersUpdateOne) SetUpdateTime(t time.Time) *UsersUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableUpdateTime(t *time.Time) *UsersUpdateOne {
	if t != nil {
		uuo.SetUpdateTime(*t)
	}
	return uuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (uuo *UsersUpdateOne) ClearUpdateTime() *UsersUpdateOne {
	uuo.mutation.ClearUpdateTime()
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UsersUpdateOne) SetDeletedAt(t time.Time) *UsersUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableDeletedAt(t *time.Time) *UsersUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UsersUpdateOne) ClearDeletedAt() *UsersUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetIsDeletedAt sets the "is_deleted_at" field.
func (uuo *UsersUpdateOne) SetIsDeletedAt(i int8) *UsersUpdateOne {
	uuo.mutation.ResetIsDeletedAt()
	uuo.mutation.SetIsDeletedAt(i)
	return uuo
}

// SetNillableIsDeletedAt sets the "is_deleted_at" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableIsDeletedAt(i *int8) *UsersUpdateOne {
	if i != nil {
		uuo.SetIsDeletedAt(*i)
	}
	return uuo
}

// AddIsDeletedAt adds i to the "is_deleted_at" field.
func (uuo *UsersUpdateOne) AddIsDeletedAt(i int8) *UsersUpdateOne {
	uuo.mutation.AddIsDeletedAt(i)
	return uuo
}

// ClearIsDeletedAt clears the value of the "is_deleted_at" field.
func (uuo *UsersUpdateOne) ClearIsDeletedAt() *UsersUpdateOne {
	uuo.mutation.ClearIsDeletedAt()
	return uuo
}

// Mutation returns the UsersMutation object of the builder.
func (uuo *UsersUpdateOne) Mutation() *UsersMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsersUpdateOne) Select(field string, fields ...string) *UsersUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Users entity.
func (uuo *UsersUpdateOne) Save(ctx context.Context) (*Users, error) {
	var (
		err  error
		node *Users
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Users)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UsersMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsersUpdateOne) SaveX(ctx context.Context) *Users {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsersUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsersUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UsersUpdateOne) sqlSave(ctx context.Context) (_node *Users, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   users.Table,
			Columns: users.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: users.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Users.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for _, f := range fields {
			if !users.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldMobile,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.NickName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldNickName,
		})
	}
	if uuo.mutation.NickNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldNickName,
		})
	}
	if value, ok := uuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldBirthday,
		})
	}
	if uuo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldBirthday,
		})
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: users.FieldGender,
		})
	}
	if uuo.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: users.FieldGender,
		})
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: users.FieldRole,
		})
	}
	if value, ok := uuo.mutation.AddedRole(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: users.FieldRole,
		})
	}
	if uuo.mutation.RoleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: users.FieldRole,
		})
	}
	if value, ok := uuo.mutation.AddTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldAddTime,
		})
	}
	if uuo.mutation.AddTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldAddTime,
		})
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldUpdateTime,
		})
	}
	if uuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldUpdateTime,
		})
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: users.FieldDeletedAt,
		})
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: users.FieldDeletedAt,
		})
	}
	if value, ok := uuo.mutation.IsDeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: users.FieldIsDeletedAt,
		})
	}
	if value, ok := uuo.mutation.AddedIsDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: users.FieldIsDeletedAt,
		})
	}
	if uuo.mutation.IsDeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: users.FieldIsDeletedAt,
		})
	}
	_node = &Users{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
